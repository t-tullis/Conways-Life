{"version":3,"sources":["components/Box.js","components/Grid.js","components/Rules.js","App.js","index.js"],"names":["Box","selectBox","_this","props","row","col","react_default","a","createElement","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","components_Box","key","style","Rules","arrayClone","arr","JSON","parse","stringify","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gridCopy","state","setState","seed","Math","floor","random","playButton","clearInterval","intervalId","setInterval","play","speed","pauseButton","clearButton","grid","Array","fill","map","generation","slowSpeed","fastSpeed","gridCopy1","gridCopy2","neighborCount","components_Grid","components_Rules","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e55ad78a.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nclass Box extends React.Component{\n    selectBox = () => {\n        this.props.selectBox(this.props.row, this.props.col)\n    }\n    render(){\n        return(\n            <div className={this.props.boxClass}\n            id={this.props.id}\n            onClick={this.selectBox}>\n\n            </div>\n        )\n    }\n}\n\nexport default Box;","import React from 'react';\nimport Box from './Box.js'\nimport '../App.css';\n\nclass Grid extends React.Component{\n    render(){\n        const width = this.props.cols * 16;\n        let rowsArr = []\n\n        let boxClass = \"\";\n       \n        for (let i = 0; i < this.props.rows; i++){\n            for (let j = 0; j < this.props.cols; j++){\n                let boxId = i + \"_\" + j;\n\n                boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\"\n                rowsArr.push(\n                    <Box\n                    boxClass = {boxClass}\n                    key={boxId}\n                    boxId={boxId}\n                    row={i}\n                    col={j}\n                    selectBox={this.props.selectBox}\n                    />\n                )\n            }\n        }\n\n        return(\n            <div className=\"grid\" style={{width: width}}>\n                {rowsArr}\n            </div>\n        )\n    }\n}\n\nexport default Grid;","import React from 'react'\nimport '../App.css';\n\nclass Rules extends React.Component{\n    render(){\n        return(\n            <div className=\"rules\">\n                <h2>Rules</h2>\n                <ol>\n                    <li>\n                    Any live cell with fewer than two live neighbours dies (referred to as underpopulation or exposure)\n                    </li>\n                    <li>\n                    Any live cell with more than three live neighbours dies (referred to as overpopulation or overcrowding).\n                    </li>\n                    <li>\n                    Any live cell with two or three live neighbours lives, unchanged, to the next generation.\n                    </li>\n                    <li>\n                    Any dead cell with exactly three live neighbours will come to life.\n                    </li>\n                </ol>\n            </div>\n\n        )\n    }\n}\n\nexport default Rules\n","import React from 'react';\nimport Grid from './components/Grid'\nimport Rules from './components/Rules'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.speed = 150;\n    this.rows = 20;\n    this.cols = 30;\n\n    this.state = {\n      generation: 0,\n      gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n    }\n  }\n\n  selectBox = (row, col) => {\n    let gridCopy = arrayClone(this.state.gridFull);\n    gridCopy[row][col] = !gridCopy[row][col]\n    this.setState({\n      gridFull: gridCopy\n    })\n  }\n\n  //Seeds cells onto grid\n  seed = () => {\n    let gridCopy = arrayClone(this.state.gridFull);\n    for (let i = 0; i < this.rows; i++){\n      for (let j = 0; j < this.cols; j++){\n        if (Math.floor(Math.random() * 4 ) === 1 ){\n          gridCopy[i][j] = true;\n        }\n      }\n    }\n    this.setState({\n      gridFull: gridCopy\n    })\n  }\n\n  playButton = () => {\n    //calls play function at this.props.speed(every 100ms right now)\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(this.play, this.speed);\n  }\n\n  pauseButton = () => {\n    clearInterval(this.intervalId);\n  }\n\n  clearButton = () => {\n    clearInterval(this.intervalId);\n    let grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n    this.setState({\n      gridFull: grid,\n      generation: 0\n    })\n  }\n\n  slowSpeed = () => {\n    this.speed = 1000;\n    this.playButton();\n  }\n\n  fastSpeed = () => {\n    this.speed = 70;\n    this.playButton();\n  }\n\n  play = () => {\n    //need 2 copies of grid\n    //gridcopy1 is intial state of the grid\n    let gridCopy1 = this.state.gridFull\n    //gridcopy2 is the changes to the grid(as cells move)\n    let gridCopy2 = arrayClone(this.state.gridFull);\n\n    //Game of Life logic\n    for (let i = 0; i < this.rows; i++){\n      for(let j = 0; j < this.cols; j++){\n        //How many neighbors a cell has\n        let neighborCount = 0;\n        if ((i > 0) && (gridCopy1[i - 1][j])){\n          neighborCount++;\n        }\n\t\t    if (i > 0 && j > 0 && (gridCopy1[i - 1][j - 1])){\n          neighborCount++;\n        }\n\t\t    if (i > 0 && j < this.cols - 1 && (gridCopy1[i - 1][j + 1])){\n          neighborCount++;\n        }\n\t\t    if (j < this.cols - 1 && (gridCopy1[i][j + 1])){\n          neighborCount++;\n        }\n\t\t    if (j > 0 && (gridCopy1[i][j - 1])){\n          neighborCount++;\n        }\n\t\t    if (i < this.rows - 1 && (gridCopy1[i + 1][j])){\n          neighborCount++;\n        }\n\t\t    if (i < this.rows - 1 && j > 0 && (gridCopy1[i + 1][j - 1])){ \n          neighborCount++;\n        }\n\t\t    if (i < this.rows - 1 && j < this.cols - 1 && (gridCopy1[i + 1][j + 1])) {\n          neighborCount++;\n        }\n        //If neighborCount is less than 2 and neighborCount is greater than 3 \n        //the cell dies and set to false on copy grid2\n\t\t    if (gridCopy1[i][j] && (neighborCount < 2 || neighborCount > 3)){ \n          gridCopy2[i][j] = false;\n        }\n        //If neighborCount is equal to three than a new cell is created and set to true\n\t\t    if (!gridCopy1[i][j] && neighborCount === 3){\n          gridCopy2[i][j] = true;\n        }\n      }\n    }\n    this.setState({\n      gridFull: gridCopy2,\n      generation: this.state.generation + 1\n    })\n  }\n\n  componentDidMount(){\n    this.playButton();\n    this.seed();\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n        <h1>The Game of Life</h1>\n        <div className=\"gridandrules\">\n          <Grid \n            gridFull = {this.state.gridFull}\n            rows = {this.rows}\n            cols = {this.cols}\n            selectBox = {this.selectBox}\n          />\n          <Rules />\n        </div>\n        <br />\n        <h2>Generations: {this.state.generation} </h2>\n\n        <div className=\"gameBtnsContainer\">\n        <button onClick={this.playButton}>\n          Play  \n        </button>\n        <button  onClick={this.pauseButton}>\n          Pause\n        </button>\n        <button onClick={this.seed}>\n          Seed \n        </button>\n        <button  onClick={this.clearButton}>\n          Clear\n        </button>\n        <button  onClick={this.slowSpeed}>\n          Slow\n        </button>\n        <button  onClick={this.fastSpeed}>\n          Fast\n        </button>\n        </div>\n    </div>\n    );\n  }\n}\n\n//Creates a deep copy of array(grid) \nfunction arrayClone(arr){\n  return JSON.parse(JSON.stringify(arr));\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}